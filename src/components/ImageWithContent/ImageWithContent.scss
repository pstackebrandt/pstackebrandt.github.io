@use "../../styles/variables" as vars;

// Component that displays an image alongside content
// Default values are defined in the JavaScript component and passed as CSS variables
// This avoids duplication of values and ensures a single source of truth
.image-with-content {
  display: grid;
  // Uses CSS variables set by the JavaScript component 
  grid-template-columns: var(--image-width) 1fr;
  gap: vars.$spacing-l;
  margin-bottom: vars.$spacing-l;

  // Modifier class that reverses the layout to show image on the right side
  &--image-right {
    // Reversed column order - content first, then image
    grid-template-columns: 1fr var(--image-width);

    // Position the image in the second column
    .image-with-content__image-container {
      grid-column: 2;
      grid-row: 1;
    }

    // Position the content in the first column
    .image-with-content__content {
      grid-column: 1;
      grid-row: 1;
    }
  }

  // Container for the image with size constraints
  &__image-container {
    width: 100%;
    max-width: var(--image-width);
    padding: vars.$spacing-s;
    margin: 0 auto;
  }

  // Container for the content with vertical arrangement
  &__content {
    display: flex;
    flex-direction: column;
    gap: vars.$spacing-m;
  }

  // Medium screen responsiveness (tablets, small laptops)
  // Changes from two-column to one-column layout
  @include vars.below("medium") {
    // Switch to single column layout
    grid-template-columns: 1fr;
    gap: vars.$spacing-m;

    // Special handling for right-image variant on medium screens
    &--image-right {
      grid-template-columns: 1fr;

      // Reset the image container position for single column layout
      .image-with-content__image-container {
        grid-column: 1;
        grid-row: 1;
        // Use the medium max width set by the JavaScript component
        max-width: var(--medium-max-width);
        margin: 0 auto;
      }

      // Ensure responsive image scaling
      .responsive-image__img {
        max-width: 100%;
        height: auto;
      }

      // Position content below the image in the vertical layout
      .image-with-content__content {
        grid-column: 1;
        grid-row: 2;
      }
    }

    // Standard image container styles for medium screens
    &__image-container {
      max-width: var(--medium-max-width);
      grid-row: 1;
    }

    // Position content below the image in the vertical layout
    &__content {
      grid-row: 2;
    }
  }

  // Small screen responsiveness (mobile phones)
  @include vars.below("small") {
    // Adjust image container for small screens
    // Ensure proper image scaling for small screens
    .image-with-content__image-container {
      // Use the mobile max width set by the JavaScript component
      max-width: var(--mobile-max-width);
      margin: 0 auto;
    }

    // Ensure all responsive images scale appropriately, including in the right-positioned variant
    .responsive-image__img {
      max-width: 100%;
      height: auto;
    }
  }
}

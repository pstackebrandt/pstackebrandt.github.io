
---

Markdown Best Practices
=======================

Document Structure
------------------
- Use a single `# Title` at the top
- Follow with a brief description
- Organize content with hierarchical headings (`##`, `###`)
- Include a TOC for documents longer than 3 sections

Formatting
----------
- Keep lines under 120 characters for readability
- Break long lines at natural points (after periods, commas, or logical breaks)
- Use **bold** for emphasis, *italics* for terminology
- Code blocks: Triple backticks with language identifier (REQUIRED - prevents MD040)
- Inline code: Single backticks for commands, variables
- Horizontal rules (`---`) only to separate major sections

Lists
-----
- Use ordered lists (1. 2. 3.) for sequential steps
- Use unordered lists (- or *) for non-sequential items
- Maintain consistent indentation for nested lists

Links and References
--------------------
- Use descriptive link text: `[descriptive text](mdc:URL)`
- Prefer relative links for project files
- Group related references at document bottom

Images
------
- Include alt text: `![alt text](mdc:image-path)`
- Keep width under 900px for readability
- Store images in dedicated `/assets` or `/images` folder

Tables
------
- Use tables for structured data comparisons
- Include header row and alignment indicators
- Keep tables simple; avoid nested tables

Common Lint Errors to Avoid
---------------------------
- MD040: Always specify a language for fenced code blocks
- MD013: Keep line length under 120 characters
- MD022: Headers must be surrounded by blank lines
- MD023: Headers must start at beginning of line
- MD032: Lists should be surrounded by blank lines
- MD041: First line should be a top-level header

---

Shell Command Context Specification
-----------------------------------

Precede command blocks requiring a specific starting directory or shell
environment with a single comment line specifying the required shell(s)
and starting path.

**Starting Path**
- Default: Relative paths from `repo-root` (top-level dir, e.g., with `.git`).
- Use the most specific relevant directory (e.g., `repo-root/src/project`).
- Allowed: Absolute paths if necessary (e.g., `C:\Tools`).
- Use `.` for the specified root/absolute directory itself.

**Shell**
- Default: Generic names (`PS`, `Bash`).
- Specify versions (`PS7`) or types (`GitBash`, `Cmd`) ONLY if command depends on them.

Assume user is in the specified directory with the appropriate shell.

**Format**
`# <ShellSpecifier>: <PathSpecifier>`
- `<ShellSpecifier>`: Target shell(s) (`PS`, `Bash`, `Bash/GitBash`, `PS7`).
- `<PathSpecifier>`: Starting path (relative or absolute). Use `\` or `/` matching shell/OS.

Commands in the block should use paths relative to the specified starting directory.

**Examples**

**Generic PS Command (from project dir):**
```powershell
# PS: repo-root\code\MatureWeb\Northwind.DataContext
dotnet user-secrets list --project .\Northwind.DataContext.csproj
```

**Generic Bash Command (from repo root):**
```bash
# Bash: repo-root/.
git submodule update --init
```

**PowerShell 7 Specific Command:**
```powershell
# PS7: repo-root\scripts
Get-ChildItem .\*.log | ForEach-Object -Parallel { Remove-Item $_.FullName } -ThrottleLimit 4
```

**GitBash Specific Scenario:**
```bash
# GitBash: repo-root/.
# Assumes a specific credential helper configured only for GitBash
git push origin main
```

**Absolute Path Example (Windows):**
```powershell
# PS: C:\ProgramData\MyTool
.\mytool-config.exe --update-settings
```